[[_subtree_merge]]
===== Subtree na Pag-merge

Ang ideya ng subtree na merge ay ikaw ay mayroong dalawang proyekto, at isa sa mga proyekto ay nagmamapa sa isang subdirektoryo ng isa pa.
Kapag tinukoy mo ang isang subtree merge, ang git ay kadalasang sapat na matalino na malaman na ang isa ay isang subtree sa iba at merge na angkop.

Tayo ay tumingin ng malalim sa isang halimbawa sa pagdagdag ng hiwalay na proyekto sa isang umiiral na proyekto at pagkatapos ang pag-merge sa code sa pangalawa sa isang subdirektoryo ng una.

Una, tayo ay magdagdag ng Rack na aplikasyon sa ating proyekto.
Idagdag natin ang Rack na proyekto bilang isang remote na reperensiya sa iyong sariling proyekto at pagkatapos tingnan ito sa sarili mong branch:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote --no-tags
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

Ngayon meron na tayong root sa Rack na proyekti sa ating `rack_branch` na branch at ating sariling proyekto sa `master` na branch.
Kung ikaw ay magcheck out ng isa at pagkatapos sa iba, maaari mong makita na sila ay may ibang mga root na proyekto:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

Ito ay uri ng isang kakaibang konsepto.
Hindi lahat ng mga branch sa iyong repositoryo ay talagang may mga branch sa parehong proyekto.
Ito ay hindi karaniwan, dahil ito ay bihirang kapaki-pakinabang, ngunit ito ay medyo madali na magkaroon ng mga branch na naglalaman ng ganap na kakaibang kasaysayan.

Sa kasong ito, gusto nating i-pull ang Rack na proyekto sa ating `master` na proyekto bilang isang subdirektoryo.
Magagawa natin iyan sa Git na may `git read-tree`.
Matutunan mo ang higit na tungkol sa `read-tree` at ang mga kaibigan nito sa <<_git_internals#_git_internals>>, ngunit para sa ngayon ay malaman ang root tree sa isang branch sa iyong kasalukuyang staging area at tinatrabahuang direktoryo.
Kakalipat lang natin pabalik sa iyong `master` na branch, at nagpull tayo sa `rack_branch` na branch sa `rack` na subdirektoryo sa ating `master` na branch sa ating pangunahing proyekto:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

When we commit, it looks like we have all the Rack files under that subdirectory – as though we copied them in from a tarball.
What gets interesting is that we can fairly easily merge changes from one of the branches to the other.
So, if the Rack project updates, we can pull in upstream changes by switching to that branch and pulling:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Then, we can merge those changes back into our `master` branch.
To pull in the changes and prepopulate the commit message, use the `--squash` option, as well as the recursive merge strategy's `-Xsubtree` option.
(The recursive strategy is the default here, but we include it for clarity.)

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

All the changes from the Rack project are merged in and ready to be committed locally.
You can also do the opposite – make changes in the `rack` subdirectory of your master branch and then merge them into your `rack_branch` branch later to submit them to the maintainers or push them upstream.

This gives us a way to have a workflow somewhat similar to the submodule workflow without using submodules (which we will cover in <<_git_tools#_git_submodules>>).
We can keep branches with other related projects in our repository and subtree merge them into our project occasionally.
It is nice in some ways, for example all the code is committed to a single place.
However, it has other drawbacks in that it's a bit more complex and easier to make mistakes in reintegrating changes or accidentally pushing a branch into an unrelated repository.

Another slightly weird thing is that to get a diff between what you have in your `rack` subdirectory and the code in your `rack_branch` branch – to see if you need to merge them – you can’t use the normal `diff` command.
Instead, you must run `git diff-tree` with the branch you want to compare to:

[source,console]
----
$ git diff-tree -p rack_branch
----

Or, to compare what is in your `rack` subdirectory with what the `master` branch on the server was the last time you fetched, you can run

[source,console]
----
$ git diff-tree -p rack_remote/master
----
