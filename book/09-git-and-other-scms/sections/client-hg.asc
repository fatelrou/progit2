==== Git at Mercurial

(((Interoperasyon kasama ang ibang mga VCS, Mercurial)))
(((Mercurial)))
Ang DVCS na sansinukob ay mas malaki kaysa sa Git lamang.
Sa katunayan, mayroong maraming ibang mga sistema sa espasyong ito, bawat isa ay may kani-kanilang sariling anggulo sa kung papaano tamang gumawa ng pagpamahagi ng version control.
Bukod sa Git, ang pinakapopular ay ang Mercurial, at ang dalawa ay sobrang katulad sa maraming mga kaparaanan.

Ang magandang balita, kung mas gusto mo ang kaugalian sa panig ng kliyente ng Git ngunit nagtatrabaho sa isang proyekto na ang source code ay kontrolado gamit ang Mercurial, may isang paraan upang gumamit ng Git bilang isang kliyente para sa isang Mercurial na naka-host na repositoryo.
Dahil ang paraan ng pakikipag-usap ng Git sa server na mga repositoryo ay sa pamamagitan ng mga remote, ito ay darating na hindi sorpresa na ang tulay na ito ay naipatupad bilang isang remote na katulong.
Ang pangalan ng proyekto ay git-remote-hg, at ito ay maaaring matagpuan sa https://github.com/felipec/git-remote-hg[].

===== git-remote-hg

Una, kailangan mong mag-install ng git-remote-hg.
Ito ay talagang nagtatadhana sa pagpapahulog sa file nito saanman sa iyong landas, katulad nito:

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

…ipagpalagay na ang `~/bin` ay nasa iyong `$PATH`.
Ang git-remote-hg ay may iba pang dependensya: ang `mercurial` na library para sa Python.
Kung ikaw ay mayroon nang Python na naka-install, ito ay kasing simple ng:

[source,console]
----
$ pip install mercurial
----

(Kung wala ka pang Python na naka-install, bisitahin ang https://www.python.org/[] at unang kunin ito.)

Ang huling bagay na kakailanganin mo ay ang Mercurial na kliyente.
Pumunta sa https://www.mercurial-scm.org/[] at i-install ito kung hindi mo pa nagawa.

Ngayon handa ka nang gumiwang.
Lahat ng kailangan mo ay isang Mercurial na repositoryo kung saan ka magpu-push.
Sa kabutihang palad, ang bawat Mercurial na repositoryo ay maaaring kumilos sa ganitong paraan, kaya gagamitin lang nating ang "hello world" na repositoryo na ginagamit ng lahat upang matuto ng Mercurial:

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Pagsisimula

Ngayon na mayroon na tayong isang angkop na ``server-side'' na repositoryo, maaari tayong tumahak sa isang tipikal na workflow.
Batay sa iyong makikita, ang dalawang mga sistemang ito ay sapat na magkatulad nang walang masyadong alitan.

As always with Git, first we clone:

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Mapapansin mo na ang pagtatrabaho gamit ang isang Mercurial na repositoryo ay gumagamit ng standard na `git clone` na utos.
Ito ay dahil ang git-remote-hg ay nagtatrabaho sa isang patas na mababang antas, na gumagamit ng isang katulad na mekanismo sa kung paano ang HTTP/S protocol ng Git ay napatupad (remote na mga katulong).
Dahil ang Git at Mercurial ay parehong nakadisenyo para sa bawat kliyente upang magkaroong mga isang buong kopya ng kasaysayan ng repositoryo, ang utos na ito ay gumagawa ng isang buong clone, kasama ang lahat ng kasaysayan ng proyekto, at ito ay patas na madali.

Ang log na utos ay nagpapakita ng dalawang mga commit, ang pinakabago sa mga ito ay itinuro ng buong slew ng mga ref.
Kinalalabasan na ang ilan sa mga ito ay hindi aktwal na nandoon.
Tingnan natin ang kung ano ang aktwal na nandoon sa `.git` na direktoryo:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

Ang git-remote-hg ay sinusubukang gawin ang mga bagay na mas salawikaing katulad ng Git, ngunit sa ilalim nito ito ay namamahala sa konseptwal na pag-map sa pagitan ng dalawa na bahagyang magkaibang mga sistema.
Ang `refs/hg` na direktoryo ay kung saan ang aktwal na remote na mga ref ay nakaimbak.
Halimbawa, ang `refs/hg/origin/branches/default` ay isang Git ref na file na naglalaman ng SHA-1 na nagsisimula sa ``ac7955c'', na ang commit na tinuturo ng `master`.
Kaya ang `refs/hg` na direktoryo ay medyo katulad ng isang pekeng `refs/remotes/origin`, ngunit ito ay may nakadagdag na pagkakaiba sa pagitan ng mga bookmark at mga branch.

Ang `notes/hg` na file ay ang panimulang punto para sa kung paano magmapa ang git-remote-hg ng Git commit na mga hash sa mga ID ng Mercurial na changeset.
Magsiyasat tayo ng kaunti:

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

Kaya ang `refs/notes/hg` ay tumuturo sa isang tree, na ang Git object na database ay isang listahan ng ibang mga object na may mga pangalan.
Ang `git ls-tree` ay naglalabas ng mode, type, object hash, at filename para sa mga item sa loob ng isang tree.
Kapag tayo ay maghuhukay sa isa sa mga item ng tree, makikita natin na ang nasa loob nito ay isang blob na nakapangalang ``ac9117f'' (ang SHA-1 na hash ng commit na itinuro ng `master`), na may mga nilalaman na ``0a04b98'' (na ID ng Mercurial na changeset sa dulo ng `default` na branch).

Ang magandang balita ay kadalasan hindi na natin kailangang mag-alala tungkol sa lahat ng mga ito.
Ang tipikal na daloy ng trabaho ay hindi masyadong magkaiba mula sa pagtatrabaho sa isang Git na remote.

May isa pang bagay na dapat nating harapin bago tayo magpatuloy: mga ignore.
Ang Mercurial at Git ay gumagamit ng isang sobrang katulad na mekanismo para dito, ngunit malamang na hindi mo gustong aktwal na mag-commit ng isang `.gitignore` na file sa isang Mercurial na repositoryo.
Sa kabutihang palad, ang Git ay may isang paraan upang hindi pumansin ng mga file na lokal sa isang on-disk na repositoryo, at ang Mercurial na format ay katugma sa Git, kaya kailangan mo lang itong kopyahin:

[source,console]
----
$ cp .hgignore .git/info/exclude
----

Ang `.git/info/exclude` na file ay kumikilos katulad ng isang `.gitignore`, ngunit hindi kasama ang mga commit.

===== Workflow

Ipagpalagay natin na nakagawa tayo ng ilang trabaho at gumawa ng ilang mga commit sa `master` na branch, at ikaw ay handa nang i-push ito sa remote na repositoryo.
Narito ang kung ano ang hitsura ng nasa ating repository ngayon:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Ang ating `master` na branch ay nauuna ng dalawang mga commit kaysa sa `origin/master`, ngunit ang mga commit na iyon ay umiiral lamang sa ating lokal na makina.
Tingnan natin kung may iba pa na gumagawa ng importanteng trabaho sa parehong panahon:

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Dahil nagamit natin ang `--all` na flag, nakikita natin ang ``notes'' na mga ref na panloob na ginamit ng git-remote-hg, ngunit maaari nating hindi pansinin ang mga ito.
Ang iba ay katulad ng ating inaakala; ang `origin/master` ay lumamang ng isang commit, at ang ating kasaysayan ay humiwalay na ngayon.
Hindi katulad ng ibang mga sistema na ating natrabaho sa kabanatang ito, ang Mercurial ay may kakayahang mag-asikaso ng mga merge, kaya hindi na tayo gagawa ng anumang magarbo.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Perpekto.
Pinatakbo natin ang mga pagsubok at ang lahat ay pumasa, kaya handa na tayong mamahagi ng ating trabaho sa natitirang bahagi ng koponan:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

Ayan yun!
Kung titingnan mo ang Mercurial na repositoryo, makikita mo na ito ay gumawa ng ating inaasahan:

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Ang changeset na nakanumerong _2_ ay ginawa ng Mercurial, at ang mga changeset na nakanumerong _3_ at _4_ ay ginawa ng git-remote-hg, sa pamamagitan ng pag-push ng mga commit na ginawa gamit ang Git.

===== Mga Branch at Mga Bookmark

Ang Git ay mayroon lamang isang uri ng branch: isang reperensya na gumagalaw kapag nagawa ang mga commit.
Sa Mercurial, ang uri ng reperensyang ito ay tinatawag na isang ``bookmark,'' at ito ay kumikilos sa masyadong parehong paraan sa isang Git na branch.

Ang konsepto ng Mercurial sa isang ``branch'' ay mas mabigat.
Ang branch na gumawa ng isang changeset ay naitala _kasama ang changeset_, na nangangahulugang ito ay palaging nasa kasaysayan ng repositoryo.
Narito ang isang halimbawa ng isang commit na nagawa sa `develop` na branch:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

Tandaan ang linya na nagsisimula sa ``branch''.
Ang Git ay hindi talaga maaaring magkopya nito (ay hindi na kailangan; ang parehong mga uri ng branch ay irepresenta bilang isang Git ref), ngunit ang git-remote-hg ay kailangang maunawaan ang pagkakaiba, dahil ang Mercurial ay nagmamalasakit.

Ang paggawa ng Mercurial na mga bookmark ay kasing dali ng paglikha ng Git na mga branch.
Sa panig ng Git:

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

Iyon lang lahat ang nandoon.
Sa panig ng Mercurial, ito ay magmumukhang katulad nito:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Tandaan na ang bagong `[featureA]` na tag sa revision 5.
Ang mga ito ay kumikilos na eksaktong katulad ng Git na mga branch sa panig ng Git, na may isang pagbubukod: hindi mo maaaring burahin ang isang bookmark mula sa panig ng Git (ito ay isang limitasyon ng remote na mga katulong).

Maaari ka ring magtrabaho ng isang ``heavyweight'' na Mercurial na branch: maglagay lamang ng isang branch sa `branches` na namespace:

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

Narito ang kung ano ang hitsura nito sa panig ng Mercurial:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

Ang pangalan ng branch na ``permanent'' ay naitala gamit ang changeset na nakamarkang _7_.

Mula sa panig ng Git, ang pagtatrabaho sa alinmang mga estilo ng branch na ito ay pareho: mag-checkout, commit, fetch, merge, pull, at push katulad ng normal mong ginagawa.
Isang bagay na dapat mong malaman ay ang Mercurial ay hindi sumusuporta sa pagsusulat muli sa kasaysayan, pagdagdag lamang nito.
Narito ang kung ano ang hitsura ng ating repositoryo ng Mercurial pagkatapos ng isang interactive na rebase at isang force-push:

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Ang mga changeset na _8_, _9_, at _10_ ay nilikha at nabibilang sa `permanent` na branch, ngunit ang lumang mga changeset ay nandoon pa rin.
Ito ay maaaring maging *sobrang* nakakalito para sa iyong mga kasamahan sa koponan na gumagamit ng Mercurial, kaya subukang iwasan ito.


===== Buod ng Mercurial

Ang Git at Mercurial ay sapat na magkatulad na ang pagtatrabaho sa kabuuang hangganan ay patas na hindi masakit.
Kung iiwasan mo ang pagbabago ng kasaysayan na naiwan sa iyong makina (bilang pangkalahatang inirekomenda), marahil maaaring hindi mo pa alam na ang kabilang dulo ay Mercurial.
