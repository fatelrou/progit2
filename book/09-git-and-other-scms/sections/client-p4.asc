==== Git at Perforce

(((Interoperasyon sa ibang mga VCS, Perforce)))
(((Perforce)))
Ang Perforce ay isang sobrang popular na sistema ng version-control sa korporasyong mga environment.
Ito ay nasa paligid na mula 1995, na ginagawa itong pinakalumang sistema na natalakay sa kabanatang ito.
Tulad nito, ito'y dinisenyo gamit ang ang mga hadlang sa panahon nito; ito ay nagpapalagay na palagi kang konektado sa isang solong sentral na server, at isang beryon lamang ang pinapanatili sa lokal na disk.
Upang maging sigurado, ang mga tampok at mga hadlang nito ay akma sa iilang tiyak na mga problema, ngunit may maraming mga proyekto na gumagamit ng Perforce kung saan ang Git ay aktwal na mas maayos na gumagana.

Mayroong dalawang mga opsyon kung gusto mong paghaluin ang iyong paggamit ng Perforce at Git.
Ang nauuna na tatalakayin natin ay ang ``Git Fusion'' na tulay mula sa mga marka ng Perforce, na nagpapahintulot sa iyo na ilantad ang mga subtree ng iyong Perforce depot bilang read-write na mga repositoryo ng Git.
Ang pangalawa ay ang git-p4, isang client-side na tulay na hahayaan kang gumamit ng Git bilang isang Perforce na kliyente, nang hindi nangangailangan ng anumang muling pagsasaayos ng Perforce server.

[[_p4_git_fusion]]
===== Pagsasanib ng Git

(((Perforce, Pagsasanib ng Git)))
Ang Perforce ay nagbibigay ng isang produkto na tinatawag na Pagsasanib ng Git (makukuha sa http://www.perforce.com/git-fusion[]), na pinagsasabay ang isang Perforce na server sa Git na mga repositoryo sa panig ng server.

====== Pag-set Up

Para sa ating mga halimbawa, gagamit tayo ng pinakamadaling pag-install na pamamaraan para sa Git Fusion, na nagda-donwload ng isang virtual na makina na nagpapatakbo ng Perforce daemon at Git Fusion.
Maaari mong kunin ang imahe ng virtual na makina mula sa http://www.perforce.com/downloads/Perforce/20-User[], at kapag ito ay natapos nang mag-download, i-import ito sa iyong paboritong virtualization na software (gagamit tayo ng VirtualBox).

Sa unang pagsisimula sa makina, tatanungin ka nito na i-customize ang password para sa tatlong Linux na mga gumagamit (`root`, `perforce`, at `git`), at magbigay ng isang instance na pangalan, na maaaring gamitin upang makilala ang pag-install na ito mula sa mga iba sa parehong network.
Kapag nakumpleto ng iyon ang lahat, makikita mo ito:

.Ang boot screen ng virtual na makina ng Git Fusion
image::images/git-fusion-boot.png[Ang boot screen ng virtual na makina ng Git Fusion.]

Dapat mong tandaan ang IP address na ipinakita dito, gagamitin natin ito mamaya.
Susunod, lilikha tayo ng isang Perforce na gumagamit.
Piliin ang ``Login'' na opsyon sa ibaba at pindutin ang enter (o SSH sa makina), at mag-log in bilang `root`.
Pagkatapos ay gamitin ang mga utos na ito upang lumikha ng isang gumagamit:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

Ang nauuna ay magbubukas ng isang VI na editor upang i-customize ang gumagamit, ngunit maaari mong tanggapin ang mga default sa pamamagitan ng pag-type ng `:wq` at pagpindot ng enter.
Ang pangalawa ay didiktahan kang magpasok ng isang password nang dalawang beses.
Iyan lahat ang kakailanganing gawin natin sa isang shell prompt, kaya lumabas sa sesyon.

Ang sunod na bagay na kakailanganing gawin upang sumunod ay sabihan ang Git na huwang patunayan ang SLL na mga sertipiko.
Ang Git Fushion na imahe ay nagsasama ng isang sertipiko, ngunit ito ay para sa isang domain na hindi tutugma sa iyong IP address ng virtual na makina, kaya ang Git ay tatanggihan ang HTTPS na koneksyon.
Kung ito ay magiging isang permanenteng pag-install, konsultahin ang Perforce Git Fusion na manwal upang mag-install ng isang naiibang sertipiko; para sa mga hangarin ng ating halimbawa, ito ay sapat lamang:

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

Ngayon maaari nating subukan na ang lahat ay gumagana.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

Ang virtual-machine na imahe ay dumarating nang may kasangkapan na isang halimbawang proyekto na maaari mong i-clone.
Dito tayo ay nagko-clone sa HTTPS, gamit ang `john` na gumagamit na ginawa natin sa itaas; ang Git ay magtatanong para sa mga kredensyal para sa koneksyong ito, ngunit ang kredensyal na cache ay papayagan tayong lumaktaw sa hakbang na ito para sa anumang kasunod na mga kahilingan.

====== Kumpigurasyon ng Fusion

Kapag na-install mo na ang Git Fusion, gugustuhin mong i-tweak ang kumpigurasyon.
Ito ay talagang patas na madaling gawin gamit ang iyong paboritong Perforce na kliyente; i-mapa lamang ang `//.git-fusion` na direktoryo sa server ng Perforce patungo sa iyong workspace.
Ang istraktura ng file ay magmumukhang katulad nito:

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files
----

Ang `objects` na direktoryo ay panloob na ginagamit ng Git Fusion upang i-mapa ang mga bagay ng Perforce sa Git at kabaligtaran, hindi mo na kailangang guluhin ang anumang nandoon.
May isang global na `p4gf_config` na file sa direktoryong ito, pati na rin sa bawat repositoryo – ang mga ito ay kumpigurasyon na mga file na tumutukoy kung paano kumikilos ang Git Fusion.
Tingnan natin ang file sa root:

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

Hindi na tayo pumasok pa sa mga kahulugan ng mga flag na ito dito, ngunit tandaan na ito ay isang INI-formatted text na file lamang, masyadong katulad ng ginigamit ng Git para sa kumpigurasyon.
Ang file na ito ay tinutukoy ang global na mga opsyon, na maaaring i-override ng mga file na repository-specific na kumpigurasyon, katulad ng `repos/Talkhouse/p4gf_config`.
Kung bubuksan mo ang file na ito, makikita mo ang isang `[@repo]` na seksyon na may ilang mga setting na naiiba sa global na mga default.
Makikita mo rin ang mga seksyon na nagmumukhang katulad nito:

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

Ito ay isang pagmapa sa pagitan ng isang Perfoce na branch at isang Git na branch.
Ang seksyon ay maaaring pangalanan sa kung anuman ang gugustuhin mo, hangga't ang pangalan ay natatangi.
Ang `git-branch-name` ay hahayaan kang palitan ang isang depot na landas na maaaring maging masalimuot sa ilalim ng Git ng isang mas palakaibigan na pangalan.
Ang `view` na setting ay namamahala kung paano namapa ang mga file ng Perforce sa Git na repositoryo, gamit ang syntax ng standard view ng pagmapa.
Higit pa sa isang pagmapa ang maaaring matukoy, kagaya ng halimbawang ito:

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

Sa paraang ito, kung ang iyong normal na pagmapa ng workspace ay nagsasama ng mga pagbabago sa istraktura ng mga direktoryo, maaari mong kopyahin iyon gamit ang isang Git na repositoryo.

Ang huling file na tatalakayin natin ay ang `users/p4gf_usermap`, na nagmamapa ng Perforce na mga gumagamit, at maaaring hindi mo na kakailanganin.
Kapag ikaw ay ng nagpapalit mula sa isang Perforce na changeset patungo sa isang Git na commit, ang default na pag-uugali ng Git Fusion ay ang paghahanap sa Perforce na gumagamit, at gagamit ng email address at buong pangalan na naka-imbak doon para sa may-akda/taga-commit na patlang sa Git.
Kapag nagpapalit sa ibang paraan, ang default ay ang paghahanap ng Perforce na gumagamit na may email address na naka-imbak sa may-akda na field ng Git na commit, at isusumite ang changeset bilang gumagamit na iyon (na may mga permiso na inilalapat).
Sa karamihang mga kaso, ang pag-uugaling ito ay maayos lamang, ngunit isaalang-alang ang sumusunod na pagmapa na file:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Ang bawat linya ay naka-format na `<user> <email> "<full name>"`, at lumilikha ng isang solong gumagamit na pagmapa.
Ang unang dalawang mga linya ay nagmamapa ng dalawang naiibang mga email address sa parehong Perforce user na account.
Ito ay kapaki-pakinabang kung ikaw ay nakagawa ng Git na mga commit sa ilalim ng ilang magkaibang mga email address (o nagbago ng mga email address), ngunit gusto silang mamapa sa parehong Perforce na gumagamit.
Kapag lumilikha ng isang Git na commit mula sa isang Perforce na changeset, ang unang linya na tumutugma sa Perforce na gumagamit ay gagamitin para sa impormasyon ng Git authorship.

Ang huling dalawang mga linya ay nagmamaskara sa aktwal na mga pangalan at mga email address nina Bob at Joe mula sa Git na mga commit na nilikha.
Ito ay maganda kung gusto mong mag-open-source ng isang panloob na proyekto, ngunit hindi gustong i-publish ang iyong employee na direktoryo sa buong mundo.
Tandaan na ang mga email address at buong mga pangalan ay dapat natatangi, maliban kung gusto mong ipalagay ang lahat ng Git na mga commit sa isang solong kathang-isip na may-akda.

====== Workflow

Ang Git Fusion ng Perforce ay isang dalawang-daanan na tulay sa pagitan ng Perfoce at Git na version control.
Tingnan natin kung ano ang pakiramdam sa pagtatrabaho mula sa panig ng Git.
Ating ipalagay na nagmapa tayo sa ``Jam'' na proyekto gamit ang isang kumpigurasyon na file na ipinakita sa itaas, na maaari nating i-clone katulad nito:

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

Sa unang pagkakataon na gagawin natin ito, maaari itong magtagal ng ilang saglit.
Ang nangyayari ay ang Git Fusion ay nagpapalit sa lahat ng naaangkop na mga changeset sa kasaysayan ng Perforce patungo sa Git na mga commit.
Ito ay lokal na nangyayari sa server, kaya ito ay relatibong mabilis, ngunit kung mayroon kang maraming kasaysayan, maaari rin itong tumagal ng ilang sandali.
Ang kasunod na mga fetch ay gumagawa ng incremental na pagpapalit, kaya ito ay nararamdaman na mas katulad sa likas na bilis ng Git. 

Batay sa iyong nakikita, ang ating repositoryo ay namumukhang eksaktong katulad ng ibang Git na repositoryo na maaari mong trabahuan.
Mayroong tatlong mga branch, at ang Git ay nakakatulong na gumawa ng isang lokal na `master` na branch na sumusubaybay sa `origin/master`.
Gumawa tayo ng kaunting trabaho, at lumikha ng ilang bagong mga commit:

[source,console]
----
# ...
$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Mayroon tayong dalawang bagong mga commit.
Ngayon suriin natin kung may ibang taong nagtatrabaho:

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Mukhang mayroon nga!
Hindi mo na kailangang malaman ito mula sa pananaw na ito, ngunit ang `6afeb15` na commit ay aktwal na nilikha gamit ang isang Perforce na kliyente.
Ito ay magmumukha lamang na ibang commit mula sa pananaw ng Git, na eksakto ang punto.
Tingnan natin kung paano nakikitungo ang Perforce na server sa isang merge na commit:

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

Ang Git ay iisiping ito ay gumagana.
Tingnan natin ang kasaysayan ng `README` na file mula sa pananaw ng Perforce, gamit ang tampok na revision graph ng `p4v`:

.Revision graph ng Perforce na resulta mula sa Git push.
image::images/git-fusion-perforce-graph.png[Revision graph ng Perforce na resulta mula sa Git push.]

Kung hindi ka pa nakakakita ng ganitong pananaw dati, ito ay maaaring magmistulang nakakalito, ngunit ito ay nagpapakita ng parehong mga konsepto bilang isang grapikal na viewer para sa kasaysayan ng Git.
Tayo ay tumitingin sa kasaysayan ng `README` na file, kaya ang direktoryo na tree sa kaliwang itaas ay nagpapakita lamang ng file habang ito ay lumutang sa magkaibang mga branch.
Sa kanang itaas, mayroon tayong isang biswal na graph ng paano ang magkaibang mga revision ng file ay nauugnay, at ang malaking larawan na pananaw sa graph na ito sa kanang ibaba.
Ang natitirang pananaw ay binigay sa mga detalye na pananaw para sa napiling revision (`2` sa kasong ito).

Isang bagay na pansinin ay ang graph ay nagmumukhang eksaktong katulad ng isa na nasa kasaysayan ng Git.
Ang Perforce ay hindi nagkaroon ng isang nakapangalang branch para iimbak ang `1` at `2` na mga commit, kaya ito ay gumawa ng isang ``anonymous'' na branch sa `.git-fusion` na direktoryo upang panghawakan ito.
Ito rin ay mangyayari para sa nakapangalang mga branch ng Git na hindi tumutugma sa isang nakapangalang Perforce na branch (at maaari mong i-mapa mamaya ang mga iyon sa isang Perforce na branch gamit ang kumpigurasyon na file).

Karamihan sa ito ay nangyayari sa likod na mga eksena, ngunit ang huling resulta ay ang isang tao sa isang koponan ay maaaring gumagamit ng Git, ang iba pa ay gumagamit ng Perforce, at ni isa sa kanila ay hindi malalaman ang tungkol sa pinili ng isa.

====== Buod ng Git-Fusion

Kung ikaw ay mayroong (o maaaring makakuha ng) access sa iyong Perforce na server, ang Git Fusion ay isang dakilang paraan upang ganap na papag-usapin sa isa't isa ang Git at Perforce.
Mayroong kauting kumpigurasyon na kasangkot, ngunit ang pag-aaral ay hindi masyadong matarik.
Ito ay isa sa ilang mga seksyon sa kabanatang ito kung saan ang pag-iigat tungkol sa paggamit ng buong kapangyarihan ng Git ay hindi magpapakita.
Hindi nito sinasabi na ang Perforce ay magiging masaya sa lahat ng tinatapon sa ito – kung susubukan mong isulat muli ang kasaysayan na na-push na, tatanggihan ito ng Git Fusion – ngunit matiyagang susubukan ng Git Fusion na magramdam na likas.
Maaari mo ring gamitin ang Git na mga submodule (bagaman ang mga iyon ay magmumukhang kakaiba sa Perforce na mga gumagamit), at mag-merge ng mga branch (ito ay itatala bilang isang integrasyon sa panig ng Perforce).

Kung hindi ka makakumbinsi sa tagapangasiwa ng iyong server na i-set up ang Git Fusion, mayroon pa ring paraan upang kasamang magamit ang mga kasangkapang ito.

[[_git_p4_client]]
===== Git-p4

(((git na mga utos, p4)))
Ang Git-p4 ay isang dalawang-daanan na tulay sa pagitan ng Git at Perforce.
Ito ay buong tumatakbo sa loob ng iyong Git na repositoryo, kaya hindi ka na mangangailangang mag-access pa sa Perforce na server (iba kaysa sa user na mga kredensyal, syempre).
Ang Git-p4 ay hindi mas umaangkop o kukumpleto sa isang solusyon kagaya ng Git Fusion, ngunit hindi nito pinapayagang gumawa ka pa ng karamihan sa kung ano ang gusto mong gawin nang hindi nagsasalakay sa server na environment.

[TANDAAN]
======
Kakailanganin mo ang `p4` na kagamitan sa kung saanman sa iyong `PATH` upang magtrabaho sa git-p4.
Batay sa kasulatang ito, ito ay libreng nakukuha sa http://www.perforce.com/downloads/Perforce/20-User[].
======

====== Pag-set Up

Para sa mga layunin ng halimbawa, papatakbuhin mo ang Perforce na server mula sa Git Fusion na OVA ayon sa nakita sa itaas, ngunit iiwasan natin ang Git Fusion na server at direktang pumunta sa Perforce na version control.

Upang magamit ang `p4` na command-line na kliyente (kung saan nakadepende ang git-p4), kakailanganin mong magtakda ng dalawang environment na mga variable:

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Pagsisimula

Batay sa anuman sa Git, ang unang utos ay ang pag-clone:

[source,console]
----
$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

Ito ay lumilikha ng kung ano ang tinatawag ng Git na isang ``mababaw'' na clone; ang pinakakamakailan lamang na rebisyon ng Perforce ang na-import sa Git; tandaan, ang Perforce ay hindi nakadisenyo upang magbigay ng bawat rebisyon sa bawat gumagamit.
Ito ay sapat upang gumamit ng Git bilang isang Perforce na kliyente, ngunit para sa ibang mga layunin ito ay hindi pa sapat.

Kapag ito ay natapos, mayroon tayong isang buong functional na repositoryo ng Git:

[source,console]
----
$ cd myproject
$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Tandaan kung paano nagkaroon ng isang ``p4'' na remote para sa Perforce na server, ngunit ang lahat ng iba ay magmumukhang katulad ng isang standard na clone.
Sa katunayan, ito ay medyo nakakalinlang; walang aktwal na remote doon.

[source,console]
----
$ git remote -v
----

Wala talagang mga remote na umiiral sa repositoryong ito.
Ang Git-p4 ay lumikha ng ilang mga ref upang magrepresenta sa estado ng server, at sila ay magmumukhang katulad ng remote na mga ref sa `git log`, ngunit sila ay hindi pinamamahalaan ng Git, hindi mo maaaring i-push ang mga ito.

====== Workflow

Sige, gumawa tayo ng ilang trabaho.
Ipalagay natin na ikaw ay gumawa ng ilang pag-unlad sa isang sobrang importanteng tampok, at handa ka nang ipakita ito sa natitirang bahagi ng iyong koponan.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

Tayo ay gumawa ng dalawang bagong mga commit na handa nating isumite sa Perforce na server.
Suriin natin kung may ibang taong nagtatrabaho ngayong araw na ito:

[source,console]
----
$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Mukhang sila nga, at ang `master` at `p4/master` ay magkahiwalay.
Ang sistema ng pag-branch ng Perforce ay _walang_ katulad sa Git, kaya ang pagsumite ng merge na mga commit ay hindi gumagawa ng kahulugan.
Ang Git-p4 ay nagrerekomenda na mag-rebase ka ng iyong mga commit, at nagsasama rin ng isang shortcut upang gumawa nito:

[source,console]
----
$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Marahil ay maaari mong masabi batay sa output, ngunit ang `git p4 rebase` ay isang shortcut para sa `git p4 sync` na sinusundan ng `git rebase p4/master`.
Ito ay medyo mas matalino kaysa sa iyon, lalo na kung ikaw ay nagtatrabaho sa maramihang mga branch, ngunit ito ay isang magandang pagtatantya.

Ngayon ang ating kasaysayan ay linear na ulit, at handa na tayong mag-ambag ng ating mga pagbabago pabalik sa Perforce.
Ang `git p4 submit` na utos ay susubukang lumikha ng isang bagong rebisyon ng Perforce para sa bawat Git na commit sa pagitan ng `p4/master` at `master`.
Ang pagpapatakbo nito ay ihuhulog tayo sa ating paboritong editor, at ang mga nilalaman ng file ay magmumukhang kagaya nito:

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

Ito ay kadalasang magkapareho sa nilalaman na iyong nakikita sa pagpapatakbo ng `p4 submit`, maliban sa bagay sa huli na nakakatulong na idinagdag ng git-p4.
Ang Git-p4 ay susubukang isa-isang parangalan ang iyong Git at Perforce na mga setting kapag kailangan nitong magbigay ng isang pangalan para sa isang commit o changeset, ngunit sa ilang kaso gusto mong i-override ito.
Halimbawa, kung ang Git na commit na iyong ini-import ay naisulat ng isang taga-ambag na walang isang Perforce user na account, maaaring gugustuhin mo rin ang resultang changeset na magmukhang isinulat nila (hindi ikaw).

Ang Git-p4 ay nakakatulong na nag-import ng mensahe mula sa Git na commit bilang nilalaman para sa Perforce na changeset na ito, kaya ang lahat na kailangan nating gawin ay ang pag-save at umalis, dalawang beses (para sa bawat commit).
Ang resultang shell na output ay magmumukhang kagaya nito:

[source,console]
----
$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Ang resulta ay bagaman gumawa lamang tayo ng isang `git push`, na ang pinakamalapit na analohiya sa kung ano ang akwal na nangyari.

Tandaan na sa panahon ng prosesong ito ang bawat Git na commit ay naging isang Perforce na changeset; kung gusto mong isiksik ang mga ito patungo sa isang solong changeset, maaari mong gawin iyon gamit ang isang interactive na rebase bago sa pagpapatakbo ng `git p4 submit`.
Tandaan din na ang SHA-1 na mga hash ng lahat ng mga commit na nasumite bilang mga changeset ay nabago; ito ay dahil ang git-p4 ay nagdaragdag ng isang linya sa hulihan ng bawat commit na pinapalitan nito:

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

Ano ang mangyayari kung susubukang mong magsumite ng isang merge na commit?
Subukan natin ito.
Narito ang sitwasyon na kung saan tayo ay napunta:

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Ang kasaysayan ng Git at Perforce ay naghihiwalay pagkatapos ng 775a46f.
Ang panig ng Git ay mayroong dalawang mga commit, pagkatapos ay ang isang merge na commit na may Perforce na ulo, pagkatapos ay ibang commit.
Susubukan nating magsumite ng mga ito sa ibabaw ng isang solong changeset sa panig ng Perforce.
Tingnan natin kung ano ang mangyayari kung susubukan nating magsumite ngayon:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

Ang `-n` na flag ay maikli para sa `--dry-run`, na sumusubok na mag-ulat kung ano ang mangyayari kung ang pagsumite na utos ay napatakbo sa katunayan.
Sa kasong ito, ito ay magmumukhang katulad ng nilikha nating tatlong Perforce na mga changeset, na tumutugma sa tatlong non-merge na mga commit na hindi pa umiiral sa Perforce na server.
In this case, it looks like we'd be creating three Perforce changesets, which correspond to the three non-merge commits that don't yet exist on the Perforce server.
Iyon ay parang katunog ng eksaktong gusto natin, tingnan natin kung paano ang kinalalabasan nito:

[source,console]
----
$ git p4 submit
[…]
$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Ang ating kasaysayan ay magiging linear, katulad ng kunyari tayo ay nag-rebase bago magsumite (na sa katunayan ay ang eksaktong nangyari).
Ito ay nangangahulugan na maaari kang libreng lumikha, magtrabaho, magtapon, at mag-merge ng mga branch sa panig ng Git nang walang takot na ang iyong kasaysayan kahit papaano ay magiging hindi magkatugma sa Perforce.
Kung maaari mong i-rebase ito, maaari mong i-ambag ito sa isang Perforce na server.

[[_git_p4_branches]]
====== Pag-branch

Kung ang iyong Perforce na proyekto ay may maramihang mga branch, hindi ka malas; ang git-p4 ay maaaring mangasiwa nito sa paraang magmumukha itong katulad ng Git.
Sabihin nating ang iyong Perforce na depot ay inilatag katulad nito:

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

At sabihin nating mayroon kang isang `dev` na branch, na may isang view spec na nagmumukhang katulad nito:

[source]
----
//depot/project/main/... //depot/project/dev/...
----

Ang Git-p4 ay maaaring awtomatikong tumuklas ng sitwasyong iyon at gumawa ng nararapat na bagay:

[source,console]
----
$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Tandaan na ang ``@all'' na tagatukoy sa depot na landas; iyon ay sinasabihan ang git-p4 na mag-clone ng hindi lang ang pinakabagong changeset para sa subtree na iyon, ngunit ang lahat na mga changeset na nakahawak sa mga landas na iyon.
Ito ay mas malapit sa konsepto ng Git ng isang clone, ngunit kung ikaw ay nagtatrabaho sa isang proyekto na may isang mahabang kasaysayan, ito ay maaaring magtagal ng ilang sandali.

Ang `--detect-branches` na flag ay nagsasabi sa git-p4 na gumamit ng mga branch spec ng Perforce upang magmapa sa mga branch patungo sa Git na mga ref.
Kung ang mga pagmapa na ito ay hindi naroroon sa Perforce na server (na isang perpektong balidong paraan sa paggamit ng Perforce), maaari mong sabihan ang git-p4 kung ano ang mga pagmapa ng branch, at makakakuha ka ng parehong resulta:

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
$ git clone --detect-branches //depot/project@all .
----

Ang pagtakda ng `git-p4.branchList` na kumpigurasyon na variable sa `main:dev` ay sinasabihan ang git-p4 na ang ``main'' at ``dev'' ay parehong mga branch, at ang pangalawa ay isang anak ng nauuna.

Kung ngayon tayo ay gagawa ng `git checkout -b dev p4/project/dev` at gagawa ng ilang mga commit, ang git-p4 ay sapat na matalino upang i-target ang tamang branch kapag tayo ay gumawa ng `git p4 submit`.
Sa kasamaang palad, ang git-p4 ay hind maaaring pagsamahin ang mababaw na mga clone at maramihang mga branch; kung ikaw ay may isang malaking proyekto at gustong magtrabaho sa higit pa sa isang branch, kailangan mong gumawa ng `git p4 clone` nang isang beses sa bawat branch na gusto mong sumitehan.

Para sa paggawa o pagsasanib ng mga branch, kailangan mong gumamit ng isang Perforce na kliyente.
Ang Git-p4 ay maaari lamang mag-sync at magsumite sa umiiral na mga branch, at ito ay maaari lamang gumawa nito nang isang linear na changeset sa bawat pagkakataon.
Kung ikaw ay magmi-merge ng dalawang mga branch sa Git at susubukang isumite ang bagong changeset, ang lahat na maitatala ay ang isang bungkos ng mga pagbabago ng file; ang metadata tungkol sa kung anong mga branch ang kasangkot sa pagsasanib ay mawawala.

===== Buod ng Git at Perforce

Ang Git-p4 ay ginagawang posible ang paggamit ng Git na workflow gamit ang isang Perforce na server, at ito ay medyo magaling nito.
Gayunpaman, importanteng tandaan na ang Perforce ay namumuno sa pinagkukunan, at ginagamit mo lang ang Git upang lokal na magtrabaho.
Maging talagang maingat lamang tungkol sa pagbabahagi ng Git na mga commit; kung ikaw ay mayroong isang remote na ginagamit ng ibang tao, huwag mag-push ng anumang mga commit na hindi pa nasumite sa Perforce na server.

Kung gusto mong libreng ihalo ang paggamit ng Perforce at Git bilang mga kliyente para sa source control, at maaari mong kumbinsihin ang administrador ng server sa pag-install nito, ang Git Fusion ay ginagawa ang paggamit ng Git na isang primera klaseng version-control na kliyente para sa isang Perforce na server.
