[[_first_time]]
=== Unang Beses na Pag-Setup ng Git

Ngayon na mayroon ka nang Git sa iyong sistema, gugustohin mong gumawa na iilang mga bagay para ma-customize ang iyong Git na kapaligiran. Dapat isang beses mo lang itong gawin sa kahit anong kompyuter; sila ay mananatili sa pagitan ng mga pag-upgrade.
Maaari mo ding palitan ang mga ito kahit anong oras sa pamamagitan ng pagpapatakbo sa mga utos ulit.

Ang Git ay may kalakip na kagamitang tinanatawag na `git config` na nagbigay-daan sa iyo para makuha at maitakda ang mga kompigurasyon na mga variables na nagkontrol sa lahat ng mga aspeto kung paano ang hitsura ng Git at kung paano ito gumagana.(((git commands, config))) Ang mga variable na ito ay maaaring i-store sa tatlong iba't ibang mga lugar:

1. `/etc/gitconfig` na file: Naglalaman ng mga halaga na pinagana sa bawat gumagamit sa sistema at sa lahat ng kanilang mga repositoryo.
  Kung ikaw ay magpasa ng opsyon na `--system` sa `git config`, magbabasa at magsusulat ito mula sa file na ito.
  (Dahil ito ay isang kompigurasyon na file ng sistema, dapat mayroon kang tagapangasiwa o superuser na pribilehiyo para makagawa ng pagbabago dito.)
2. `~/.gitconfig` o `~/.config/git/config` na file: Ang mga halaga ay partikular para sa iyo, ang gumagamit.
  Maaari mong mapagawa ang Git na magbasa at magsulat sa file na ito sa pamamagitan ng pagpasa sa `--global` na opsyon.
3. `config` na mga file sa Git na direktoryo (kung saan ay, `.git/config`) na anumang repositoryo na kasalukuyang ginagamit mo: Partikular na sa isang repositoryo na iyan.

Bawat antas ay nag-override ng mga halaga sa nakaraang antas, kaya ang mga halaga sa `.git/config` ay mas nangingibabaw sa nasa `/etc/gitconfig`.

Sa Windows na mga sistema, ang Git ay nahahanap ng `.gitconfig` na file sa `$HOME` na direktoryo (karamihan sa mga tao ay sa `C:\Users\$USER`) Ito rin ay panatiling naghahanap sa `/etc/gitconfig`, bagamat ito ay relatibo lang sa MSys na root, kung saan kahit kailan nakapagdesisyon ka na mag-install ng Git sa iyong Windows na sistema kapag pinatakbo mo ang installer. Kung ikaw ay gumagamit ng bersyon 2.x o mas mabagong Git para sa Windows, mayroon ding isang pang-sistemang config na file sa
`C:\Documents and Settings\All Users\Application Data\Git\config` sa Windows XP, at sa `C:\ProgramData\Git\config` sa Windows Vista at sa mas bago pa. Ang config file ay mababago lang sa pamamagitan ng `git config -f <file>` bilang isang tagapangasiwa.

==== Ang Iyong Pagkakakilanlan

Ang unang bagay na dapat mong gawin kapag nag-install ka na ng Git ay ang pagtakda ng iyong bansag at email address. Ito ay importante dahil bawat commit mo sa Git ay gumagamit sa impormasyong ito, at ito ay permanteng nakasama sa mga commit na sisimulan mong ilikha:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Sa makaisa pa, kailangan mong itong gawin nang isang beses lang kung nagpasa ka ng `--global` na opsyon, dahil ang Git ay palaging gagamit sa impormasyong ito kahit anuman ang gagawin mo sa sistemang iyon. Kung gusto mong i-override ito gamit ang ibang pangalan o email address para sa mga partikular na mga proyekto, maaari mong ipatakbo ang command na walang `--global` na opsyon kung nasa proyekto ka na iyan.

Karamihan sa GUI na mga kagamitan ay makakatulong sa iyo sa paggawa nito kapag pinatakbo mo ito sa unang pagkakataon.

==== Ang Iyong Editor

Ngayon na ang iyong pagkakakilanlan ay na-setup na, maaari mo nang i-configure ang default na text editor na gagamitin kapag kakailanganin ng Git na mag-type ka nang mensahe. Kung hindi ito naka-configure, ang Git ay gagamit sa default editor ng iyong sistema.

Kung gusto mong gumamit ng ibang text editor, gaya ng Emacs, maaari mong gawin ang sumusunod:

[source,console]
----
$ git config --global core.editor emacs
----

Sa Windows na sistema, kung gusto mong gumamit ng ibang text editor, kailangan mong itukoy ang buong landas sa executable na file nito. Ito ay maaaring kakaiba depende sa kung paano ang iyong editor naka-package.

Sa kaso sa Notepad++, na isang sikat na programming editor, siguro ay gugustohin mong gumamit ng 32-bit na bersyon, dahil sa panahon na isinulat ito hindi pa suportado ng 64-bit na bersyon ang lahat ng mga plug-ins. Kung ikaw ay nasa 32-bit na Windows na sistema, o ikaw ay mayroong 64-bit na editor sa isang 64-bit na sistema, magta-type ka ng gaya nito:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Kung mayroon kang 32-bit na editor sa 64-bit na sistema, ang programa ay naka-install sa `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[TANDAAN]
====
Ang Vim, Emacs at Notepad++ ay mga sikat na mga text editor na kadalasang ginagamit ng mga developers sa isang sistema na Unix-based gaya ng Linux at MacOS o isang Windows na sistema. Kung hindi mo kabisado ang mga editor na ito, kakailanganin mong maghanap ng mga partikular na mga hakbang kung paano i-setup ang iyong paboritong editor sa Git.
====

[BABALA]
====
Makikita mo, na kung hindi naka-setup ang iyong editor gaya nito, maaaring makakaranas ka ng nakakalitong estado kapag sinubukan ng Git na patakbuhin ito. Isang halimbawa sa Windows na sistema ay maaaring maglakip ng hindi ganap na natapos na operasyon ng Git sa panahon na nag-initiate ang Git na mag-edit.
====

==== Pagsususri sa Iyong mga Settings

Kung gusto mong suriin ang iyong mga configuration settings, maaari mong gamitin ang utos na `git config --list` para malista ang lahat ng mga settings na mahahanap ng Git sa puntong iyon:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Maaaring makakakita ka ng mga key nang higit sa isang beses, dahil ang Git ay nagbabasa ng parehong key mula sa iba't ibang mga file (`/etc/gitconfig` at `~/.gitconfig`, bilang halimbawa). Sa kasong ito, ginamit ng Git ang huling halaga sa bawat nag-iisang key na makikita nito.

Maaaring mo ding suriin kung ano ang naisip ng Git na halaga sa bawat partikular na key sa pamamagitan ng pag-type ng `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[TANDAAN]
====
Dahil ang Git ay maaaring magbasa ng parehong configuration variable na halaga mula sa higit sa isang file, posible na magkakaroon ka ng hindi inaasahang halaga sa isa sa mga halagang ito at hindi mo alam kung bakit. Sa mga kasong ito, maaari kang mag-query sa Git kung saan nanggaling ang halagang iyon, at ito ay magsasabi sa iyo kung aling configuration file ang nagpasya sa pagtakda ng halagang iyon:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
